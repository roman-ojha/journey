openapi: 3.0.0
info:
  title: "Journey API Documentation"
  version: "1.0.0"
servers:
  - url: "http://localhost:8003/api"
    description: Local Development Server
  - url: "http://35.200.255.104:8003/api"
    description: Kubernetes Development Server
  - url: "http://localhost/api"
    description: Nginx Development Server
  - url: "http://34.131.106.228/api"
    description: GCP Development VM Server
tags:
  - name: "User"
    description: User Service API
  - name: "Admin.Auth"
    description: Admin Auth Related API
  - name: "Admin.CRUD"
    description: Admins CRUD operation from admin dashboard
  - name: "Admin.Profile"
    description: Admin CRUD operation for auth admin on dashboard
  - name: "Admin.UserService.CRUD"
    description: Users CRUD operation from admin dashboard
  - name: "Merchant"
    description: Merchant Service API
  - name: "Merchant.V_and_T_Service"
    description: Merchant Vehicle and Trave Service
components:
  securitySchemes:
    adminAuth:
      type: apiKey
      in: header
      name: Authorization
    userAuth:
      type: apiKey
      in: header
      name: Authorization
    merchantAuth:
      type: apiKey
      in: header
      name: Authorization
    swaggerAuth:
      type: apiKey
      in: header
      name: x-swagger-token
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          example:
            message: "Authentication credentials were not provided."

    Successful:
      description: Successful Response
      content:
        application/json:
          example:
            message: "<message>"

    NotFound:
      description: Not Found
      content:
        application/json:
          example:
            message: "<message>"

    BadRequest:
      description: Bad Request Error
      content:
        application/json:
          example:
            message: "Invalid Input"
            errors:
              <field>: ["<error_message>"]

    ValidationError:
      description: Validation Error
      content:
        application/json:
          example:
            message: "Invalid Input"
            errors:
              <field>: ["<error_message>"]

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          example:
            message: Internal Server Error

  schemas:
    # D_: For Admin Dashboard ==================================
    IUser:
      type: object
      description: User Interface
      required:
        - email
        - number
        - f_name
        - l_name
        - gender
      properties:
        email:
          type: string
          example: "roman@gmail.com"
        number:
          type: number
          example: 9843124323
        f_name:
          type: string
          example: "Roman"
        l_name:
          type: string
          example: "Ojha"
        gender:
          type: string
          example: "MALE"

    UserOutput:
      description: User Detail that get output for the client
      allOf:
        - $ref: "#/components/schemas/IUser"
      type: object
      properties:
        id:
          type: number
          example: 1
        picture:
          type: string
          example: "<url>"

    UserResponse:
      description: User object that get as a response body
      type: object
      properties:
        message:
          type: string
          example: "Successful Response"
        data:
          $ref: "#/components/schemas/UserOutput"

    UserInput:
      description: User detail for Request
      allOf:
        - $ref: "#/components/schemas/IUser"
      type: object
      required:
        - password
        - c_password
        - photo
      properties:
        password:
          type: string
          example: "roman123"
        c_password:
          type: string
          example: "roman123"

    D_UserOutput:
      description: User Details for Admin Dashboard
      allOf:
        - $ref: "#/components/schemas/UserOutput"
      type: object
      required:
        - email
        - number
        - f_name
        - l_name
        - gender
      properties:
        is_verified:
          type: boolean
          example: true
        created_at:
          type: string
          example: "2023-08-17 15:42:29"
        updated_at:
          type: string
          example: "2023-08-17 15:42:29"

    D_UserResponse:
      description: Response object about user for Admin Dashboard
      type: object
      properties:
        message:
          type: string
          example: "Successful Response"
        data:
          type: array
          items:
            $ref: "#/components/schemas/D_UserOutput"

    IAdmin:
      type: object
      description: Admin Interface
      required:
        - email
        - number
        - first_name
        - last_name
      properties:
        email:
          type: string
          example: "razz@gmail.com"
        first_name:
          type: string
          example: "Roman"
        last_name:
          type: string
          example: "Ojha"
        number:
          type: integer
          example: 9779843212343

    AdminInput:
      description: Admin detail for Request
      allOf:
        - $ref: "#/components/schemas/IAdmin"
      type: object
      required:
        - password
        - c_password
      properties:
        password:
          type: string
          example: "razzroman@123"
        c_password:
          type: string
          example: "razzroman@123"

    AdminOutput:
      allOf:
        - $ref: "#/components/schemas/IAdmin"
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          example: 1

    AdminResponse:
      description: Response object with Admin detail
      type: object
      properties:
        message:
          type: string
          example: Successful Response
        data:
          $ref: "#/components/schemas/AdminOutput"

    D_AdminOutput:
      description: Response Admin for Admin Dashboard
      allOf:
        - $ref: "#/components/schemas/AdminOutput"
      type: object
      properties:
        is_superuser:
          type: boolean
        is_staff:
          type: boolean
        is_verified:
          type: boolean

    D_AdminResponse:
      description: Response object for admin details for Admin Dashboard
      type: object
      properties:
        message:
          type: string
          example: Successful Response
        data:
          type: array
          items:
            $ref: "#/components/schemas/D_AdminOutput"

    IMerchant:
      type: object
      description: Merchant Interface
      required:
        - email
        - first_name
        - last_name
        - number
        - company_name
      properties:
        email:
          type: string
          example: "roman@gmail.com"
        first_name:
          type: string
          example: "Roman"
        last_name:
          type: string
          example: "Ojha"
        number:
          type: number
          example: 9843212343
        company_name:
          type: string
          example: "Roman PVT. LTD."

    MerchantInput:
      description: Merchant details for request
      allOf:
        - $ref: "#/components/schemas/IMerchant"
      type: object
      required:
        - password
        - c_password
      properties:
        password:
          type: string
          example: "roman123"
        c_password:
          type: string
          example: "roman123"

    MerchantOutput:
      description: Merchant details as a response
      allOf:
        - $ref: "#/components/schemas/IMerchant"
      type: object
      properties:
        id:
          type: number
          example: 1
        picture:
          type: string
          example: <url>

    MerchantResponse:
      description: Merchant object that get as a response body
      type: object
      properties:
        message:
          type: string
          example: "Successful Response"
        data:
          $ref: "#/components/schemas/MerchantOutput"

    VehicleModelInput:
      description: Represent type of vehicles
      type: object
      required:
        - model
        - no_of_seats
      properties:
        name:
          type: string
        no_of_seats:
          type: integer

    VehicleModel:
      description: Represent type of vehicles
      type: object
      required:
        - id
        - model
        - no_of_seats
      properties:
        id:
          type: string
        name:
          type: string
        no_of_seats:
          type: integer

    VehicleImageInput:
      description: Image File on Request
      type: object
      required:
        - image
      properties:
        image:
          type: string
          format: binary

    VehicleImage:
      description: Represent image for Vehicle
      type: object
      required:
        - id
        - image
        - vehicle_id
      properties:
        id:
          type: string
        image:
          type: string
        vehicle_id:
          type: string

    VehicleSeat:
      description: Represent Vehicle Seats
      type: object
      required:
        - id
        - name
        - vehicle_id
      properties:
        id:
          type: string
        name:
          type: string
        vehicle_id:
          type: string

    Vehicle:
      description: Represent Vehicle
      type: object
      required:
        - id
        - plate_no
        - model_id
      properties:
        id:
          type: string
        plate_no:
          type: string
        model_id:
          type: string
        images:
          type: array
          items:
            $ref: "#/components/schemas/VehicleImage"

    District:
      description: Represent Places
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string

    DistrictWithPlaces:
      description: Represent Places
      allOf:
        - $ref: "#/components/schemas/District"
      type: object
      required:
        - places
      properties:
        places:
          type: array
          items:
            $ref: "#/components/schemas/Place"

    Place:
      description: Represent Places
      type: object
      required:
        - id
        - name
        - district_id
      properties:
        id:
          type: string
        name:
          type: string
        district_id:
          type: string

    # TODO: for Travel
    ITravel:
      description: Represent Travel Interface
      type: object
      required:
        - departure_at
        - route
      properties:
        departure_at:
          type: string
          example: "2023-12-01T08:24:00.218Z"
        route:
          type: string
          example: From Bardibash
        driver_no:
          type: number
          example: 9854321234

    TravelInput:
      description: Travel while Requesting
      allOf:
        - $ref: "#/components/schemas/ITravel"
      type: object
      required:
        - from
        - to
        - vehicle_id
      properties:
        from:
          type: string
          example: 656884f6c7bfe7568f651837
        to:
          type: string
          example: 656882c256a3bacd5685ad43
        vehicle_id:
          type: string
          example: 656987f97e59da50840b4b6c

    TravelResponse:
      description: Trave On Response Object
      type: object
      allOf:
        - $ref: "#/components/schemas/ITravel"
      required:
        - id
        - from_place
        - to_place
        - is_active
      properties:
        id:
          type: string
        from_place:
          $ref: "#/components/schemas/Place"
        to_place:
          $ref: "#/components/schemas/Place"
        is_active:
          type: boolean
          example: true
        vehicle:
          $ref: "#/components/schemas/Vehicle"

paths:
  /user/auth/register:
    post:
      summary: User registration
      description: Register a new user.
      tags:
        - "User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User Registered Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "422":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user/auth/login:
    post:
      summary: User Login
      description: Log in a user.
      tags:
        - "User"
      requestBody:
        required: true
        content:
          application/json:
            example:
              email: "roman@gmail.com"
              password: "roman123"
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        default: "Bearer <token>"
                      expires_in:
                        type: string
                        default: "<Date>"
                      user:
                        $ref: "#/components/schemas/UserOutput"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /user/profile/picture:
    post:
      summary: Upload new picture of user
      description: Upload new user picture
      tags:
        - "User"
      security:
        - userAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - "picture"
              properties:
                picture:
                  type: string
                  format: binary
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user/profile:
    get:
      summary: Get User Data
      description: Get Authenticated User Information
      tags:
        - "User"
      security:
        - userAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "422":
          description: Validation Error
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # Todo: /user/vehicle/explore
  # Todo: /user/vehicle/<vehicle_slug>
  # Todo: /api/user/place

  /user/booking:
    post:
      summary: Vehicle Seat Booking
      description: Book Vehicle Seats
      tags:
        - "User.Booking"
      security:
        - userAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - "vehicle_id"
                - "seats"
              properties:
                vehicle_id:
                  type: string
                  example: "65d96bb538f0e67ba0c7caef"
                seats:
                  type: array
                  items:
                    type: string
                  example: ["A", "B", "1", "2"]
                vehicle_model_id:
                  type: string
                  example: "65d84947d19e7f8134732fce"
      responses:
        # "200":
        #   description: Successful response
        #   content:
        #     application/json:
        #       schema:
        #         $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # Admin Service
  /admin/auth/register:
    post:
      summary: Register new admin
      description: ""
      tags:
        - "Admin.Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminInput"
      responses:
        "201":
          description: Successful Registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminResponse"

        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /admin/auth/login:
    post:
      summary: Login Admin
      description: Login Admin with given credentials
      tags:
        - "Admin.Auth"
      requestBody:
        required: true
        content:
          application/json:
            example:
              email: "razz@gmail.com"
              password: "razzroman@123"

      responses:
        "200":
          description: Successfully Logged in
          content:
            application/json:
              example:
                refresh: "<token>"
                access: "<token>"
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                detail: "<message>"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /admin/auth/refresh:
    post:
      summary: Refresh Auth Token
      description: Get Access Token using Refresh Token
      tags:
        - "Admin.Auth"
      requestBody:
        required: true
        content:
          application/json:
            example:
              refresh: "refresh token"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                access: "<access_token>"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /admin:
    get:
      summary: Admin Details
      description: Get List of Admin Details
      tags:
        - "Admin.CRUD"
      security:
        - adminAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/D_AdminResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      summary: Update admin detail
      description: Update single admin detail using id
      tags:
        - "Admin.CRUD"
      security:
        - adminAuth: []
      requestBody:
        # required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/AdminInput"
              type: object
              required:
                - id
              properties:
                id:
                  type: number

      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/D_AdminResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete Admin record
      description: Delete Admin record using it's id
      tags:
        - "Admin.CRUD"
      security:
        - adminAuth: []
      parameters:
        - name: id
          in: query
          description: Id of the admin
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully deleted admin
          content:
            application/json:
              example:
                message: "Record has been deleted"
        "401":
          $ref: "#/components/responses/Unauthorized"

        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /admin/profile/:
    get:
      summary: Admin Detail
      description: Get Authenticated Admin Detail
      tags:
        - "Admin.Profile"
      security:
        - adminAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    patch:
      summary: Update User Profile
      description: Update User Profile, Can't Update password from here
      tags:
        - "Admin.Profile"
      security:
        - adminAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAdmin"
      responses:
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: Successfully updated the profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete Auth Admin
      description: Delete Authenticated Admin User
      tags:
        - "Admin.Profile"
      security:
        - adminAuth: []
      responses:
        "200":
          description: Your Admin account have deleted successfully
          content:
            application/json:
              example:
                message: "Your Admin account have deleted successfully"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /admin/user:
    get:
      summary: Get list of users
      description: Read list of all users
      tags:
        - "Admin.UserService.CRUD"
      security:
        - adminAuth: []
      responses:
        "200":
          description: Successfully Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/D_UserResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: Add new user
      description: Add new user from admin dashboard
      tags:
        - "Admin.UserService.CRUD"
      security:
        - adminAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: Successful Added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

    patch:
      summary: Update user
      description: Update user from admin dashboard
      tags:
        - "Admin.UserService.CRUD"
      security:
        - adminAuth: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UserInput"
              type: object
              required:
                - id
              properties:
                id:
                  type: number
      responses:
        "200":
          description: Successfully Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

        "404":
          $ref: "#/components/responses/NotFound"

        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete User record
      description: Delete Single User record using it's id
      tags:
        - "Admin.UserService.CRUD"
      security:
        - adminAuth: []
      parameters:
        - name: id
          in: query
          description: Id of the admin
          required: true
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/Successful"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /merchant/auth/register:
    post:
      summary: Merchant registration
      description: Registering new merchant with given credentials
      tags:
        - "Merchant"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MerchantInput"
      responses:
        "201":
          description: Successful Registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantResponse"
        "422":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /merchant/auth/login:
    post:
      summary: Merchant Login
      description: Login merchant with given credentials
      tags:
        - "Merchant"
      requestBody:
        content:
          application/json:
            example:
              email: "roman@gmail.com"
              password: "roman123"
      responses:
        "201":
          description: Login Successfully
          content:
            application/json:
              example:
                message: string
                data:
                  token: "<token>"
        "422":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /merchant/profile/picture:
    post:
      summary: Upload merchant picture
      description: Upload authenticated merchant profile picture
      tags:
        - "Merchant"
      security:
        - merchantAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - "picture"
              properties:
                picture:
                  type: string
                  format: binary
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantResponse"
        "422":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /merchant/auth/check:
    get:
      tags:
        - "Merchant"
      security:
        - merchantAuth: []
        - swaggerAuth: []
      responses:
        "200":
          description: "Auth user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /merchant/v-and-t-service/vehicle/model:
    get:
      summary: Get List of all Vehicle Model
      tags:
        - "Merchant.V_and_T_Service"
      security:
        - merchantAuth: []
        - swaggerAuth: []
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VehicleModel"

  /merchant/v-and-t-service/vehicle:
    post:
      summary: Add New Vehicle
      description: Add New vehicle with authenticated merchant
      tags:
        - "Merchant.V_and_T_Service"
      security:
        - merchantAuth: []
        - swaggerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - "images"
                - plate_no
                - model_id
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                plate_no:
                  type: string
                  example: "BA 1 KA 3233"
                model_id:
                  type: string
                  example: 65671b0e8b18150f39b4a041

      responses:
        "201":
          description: New vehicle added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vehicle"
        "422":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

    get:
      summary: Get List of added vehicle
      description: Get List of added vehicle by authenticated merchant
      tags:
        - "Merchant.V_and_T_Service"
      security:
        - merchantAuth: []
        - swaggerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: <message>
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Vehicle"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /merchant/v-and-t-service/vehicle/{vehicle_id}:
    get:
      summary: Get List of added vehicle
      description: Get List of added vehicle by authenticated merchant
      tags:
        - "Merchant.V_and_T_Service"
      security:
        - merchantAuth: []
        - swaggerAuth: []
      parameters:
        - name: vehicle_id
          in: path
          required: true
          schema:
            type: string
            example: 65672bbc07e97a5c21e5a81c
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: <message>
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Vehicle"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /merchant/v-and-t-service/address:
    get:
      summary: Get List of all Address
      description: Get List of address with district and it's places
      tags:
        - "Merchant.V_and_T_Service"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DistrictWithPlaces"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /merchant/v-and-t-service/travel:
    post:
      summary: Create new travel
      description: Create new travel
      tags:
        - "Merchant.V_and_T_Service"
      security:
        - merchantAuth: []
        - swaggerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TravelInput"
      responses:
        "201":
          description: Successfully Travel created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TravelResponse"
        "422":
          $ref: "#/components/responses/ValidationError"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
