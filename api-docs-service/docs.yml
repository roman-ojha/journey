openapi: 3.0.0
info:
  title: "Journey API Documentation"
  version: "1.0.0"
servers:
  - url: "http://localhost:8003/api"
  - url: "http://35.200.204.53:8003/api"
tags:
  - name: "User"
    description: User Service API
  - name: "Admin.Auth"
    description: Admin Auth Related API
  - name: "Admin.CRUD"
    description: Admins CRUD operation from admin dashboard
  - name: "Admin.Profile"
    description: Admin CRUD operation for auth admin on dashboard
  - name: "Admin.UserService.CRUD"
    description: Users CRUD operation from admin dashboard
  - name: "Merchant"
    description: Merchant Service API
components:
  securitySchemes:
    adminAuth:
      type: apiKey
      in: header
      name: Authorization
    userAuth:
      type: apiKey
      in: header
      name: Authorization
    merchantAuth:
      type: apiKey
      in: header
      name: Authorization
    swaggerAuth:
      type: apiKey
      in: header
      name: x-swagger-token
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          example:
            message: "Authentication credentials were not provided."

    Successful:
      description: Successful Response
      content:
        application/json:
          example:
            message: "<message>"

    NotFound:
      description: Not Found
      content:
        application/json:
          example:
            message: "<message>"

    BadRequest:
      description: Bad Request Or Validation Error
      content:
        application/json:
          example:
            message: "Invalid Input"
            errors:
              <field>: ["<error_message>"]

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          example:
            message: Internal Server Error

  schemas:
    # D_: For Admin Dashboard ==================================
    IUser:
      type: object
      description: User Interface
      required:
        - email
        - number
        - f_name
        - l_name
        - gender
      properties:
        email:
          type: string
          example: "roman@gmail.com"
        number:
          type: number
          example: 9843124323
        f_name:
          type: string
          example: "Roman"
        l_name:
          type: string
          example: "Ojha"
        gender:
          type: string
          example: "MALE"

    UserOutput:
      description: User Detail that get output for the client
      allOf:
        - $ref: "#/components/schemas/IUser"
      type: object
      properties:
        id:
          type: number
          example: 1
        photo_url:
          type: string

    UserResponse:
      description: User object that get as a response body
      type: object
      properties:
        message:
          type: string
          example: "Successful Response"
        data:
          $ref: "#/components/schemas/UserOutput"

    UserInput:
      description: User detail for Request
      allOf:
        - $ref: "#/components/schemas/IUser"
      type: object
      required:
        - password
        - c_password
      properties:
        password:
          type: string
          example: "roman123"
        c_password:
          type: string
          example: "roman123"

    D_UserOutput:
      description: User Details for Admin Dashboard
      allOf:
        - $ref: "#/components/schemas/UserOutput"
      type: object
      required:
        - email
        - number
        - f_name
        - l_name
        - gender
      properties:
        is_verified:
          type: boolean
          example: true
        created_at:
          type: string
          example: "2023-08-17 15:42:29"
        updated_at:
          type: string
          example: "2023-08-17 15:42:29"

    D_UserResponse:
      description: Response object about user for Admin Dashboard
      type: object
      properties:
        message:
          type: string
          example: "Successful Response"
        data:
          type: array
          items:
            $ref: "#/components/schemas/D_UserOutput"

    IAdmin:
      type: object
      description: Admin Interface
      required:
        - email
        - number
        - first_name
        - last_name
      properties:
        email:
          type: string
          example: "razz@gmail.com"
        first_name:
          type: string
          example: "Roman"
        last_name:
          type: string
          example: "Ojha"
        number:
          type: integer
          example: 9779843212343

    AdminInput:
      description: Admin detail for Request
      allOf:
        - $ref: "#/components/schemas/IAdmin"
      type: object
      required:
        - password
        - c_password
      properties:
        password:
          type: string
          example: "razzroman@123"
        c_password:
          type: string
          example: "razzroman@123"

    AdminOutput:
      allOf:
        - $ref: "#/components/schemas/IAdmin"
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          example: 1

    AdminResponse:
      description: Response object with Admin detail
      type: object
      properties:
        message:
          type: string
          example: Successful Response
        data:
          $ref: "#/components/schemas/AdminOutput"

    D_AdminOutput:
      description: Response Admin for Admin Dashboard
      allOf:
        - $ref: "#/components/schemas/AdminOutput"
      type: object
      properties:
        is_superuser:
          type: boolean
        is_staff:
          type: boolean
        is_verified:
          type: boolean

    D_AdminResponse:
      description: Response object for admin details for Admin Dashboard
      type: object
      properties:
        message:
          type: string
          example: Successful Response
        data:
          type: array
          items:
            $ref: "#/components/schemas/D_AdminOutput"

    IMerchant:
      type: object
      description: Merchant Interface
      required:
        - email
        - first_name
        - last_name
        - number
        - company_name
      properties:
        email:
          type: string
          example: "roman@gmail.com"
        first_name:
          type: string
          example: "Roman"
        last_name:
          type: string
          example: "Ojha"
        number:
          type: number
          example: 9843212343
        company_name:
          type: string
          example: "Roman PVT. LTD."

    MerchantInput:
      description: Merchant details for request
      allOf:
        - $ref: "#/components/schemas/IMerchant"
      type: object
      required:
        - password
        - c_password
      properties:
        password:
          type: string
          example: "roman123"
        c_password:
          type: string
          example: "roman123"

    MerchantOutput:
      description: Merchant details as a response
      allOf:
        - $ref: "#/components/schemas/IMerchant"
      type: object
      properties:
        id:
          type: number
          example: 1

    MerchantResponse:
      description: Merchant object that get as a response body
      type: object
      properties:
        message:
          type: string
          example: "Successful Response"
        data:
          $ref: "#/components/schemas/MerchantOutput"

paths:
  /user/auth/register:
    post:
      summary: User registration
      description: Register a new user.
      tags:
        - "User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User Registered Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "422":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user/auth/login:
    post:
      summary: User Login
      description: Log in a user.
      tags:
        - "User"
      requestBody:
        required: true
        content:
          application/json:
            example:
              email: "roman@gmail.com"
              password: "roman123"
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              example:
                message: "<message>"
                data:
                  token: "<token>"
                  expires_in: "<Date>"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /user/auth/check:
    get:
      summary: Get posts
      description: Retrieve a list of posts.
      tags:
        - "User"
      security:
        - userAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                - id: 1
                  title: "First Post"
                  content: "This is the content of the first post."
                - id: 2
                  title: "Second Post"
                  content: "This is the content of the second post."

  # Admin Service
  /admin/auth/register:
    post:
      summary: Register new admin
      description: ""
      tags:
        - "Admin.Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminInput"
      responses:
        "201":
          description: Successful Registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminResponse"

        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /admin/auth/login:
    post:
      summary: Login Admin
      description: Login Admin with given credentials
      tags:
        - "Admin.Auth"
      requestBody:
        required: true
        content:
          application/json:
            example:
              email: "razz@gmail.com"
              password: "razzroman@123"

      responses:
        "200":
          description: Successfully Logged in
          content:
            application/json:
              example:
                refresh: "<token>"
                access: "<token>"
        "401":
          description: Unauthorized
          content:
            application/json:
              example:
                detail: "<message>"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /admin/auth/refresh:
    post:
      summary: Refresh Auth Token
      description: Get Access Token using Refresh Token
      tags:
        - "Admin.Auth"
      requestBody:
        required: true
        content:
          application/json:
            example:
              refresh: "refresh token"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                access: "<access_token>"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /admin:
    get:
      summary: Admin Details
      description: Get List of Admin Details
      tags:
        - "Admin.CRUD"
      security:
        - adminAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/D_AdminResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    patch:
      summary: Update admin detail
      description: Update single admin detail using id
      tags:
        - "Admin.CRUD"
      security:
        - adminAuth: []
      requestBody:
        # required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/AdminInput"
              type: object
              required:
                - id
              properties:
                id:
                  type: number

      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/D_AdminResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete Admin record
      description: Delete Admin record using it's id
      tags:
        - "Admin.CRUD"
      security:
        - adminAuth: []
      parameters:
        - name: id
          in: query
          description: Id of the admin
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully deleted admin
          content:
            application/json:
              example:
                message: "Record has been deleted"
        "401":
          $ref: "#/components/responses/Unauthorized"

        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /admin/profile/:
    get:
      summary: Admin Detail
      description: Get Authenticated Admin Detail
      tags:
        - "Admin.Profile"
      security:
        - adminAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    patch:
      summary: Update User Profile
      description: Update User Profile, Can't Update password from here
      tags:
        - "Admin.Profile"
      security:
        - adminAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAdmin"
      responses:
        "400":
          $ref: "#/components/responses/BadRequest"
        "200":
          description: Successfully updated the profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete Auth Admin
      description: Delete Authenticated Admin User
      tags:
        - "Admin.Profile"
      security:
        - adminAuth: []
      responses:
        "200":
          description: Your Admin account have deleted successfully
          content:
            application/json:
              example:
                message: "Your Admin account have deleted successfully"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /admin/user:
    get:
      summary: Get list of users
      description: Read list of all users
      tags:
        - "Admin.UserService.CRUD"
      security:
        - adminAuth: []
      responses:
        "200":
          description: Successfully Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/D_UserResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: Add new user
      description: Add new user from admin dashboard
      tags:
        - "Admin.UserService.CRUD"
      security:
        - adminAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: Successful Added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

    patch:
      summary: Update user
      description: Update user from admin dashboard
      tags:
        - "Admin.UserService.CRUD"
      security:
        - adminAuth: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UserInput"
              type: object
              required:
                - id
              properties:
                id:
                  type: number
      responses:
        "200":
          description: Successfully Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

        "404":
          $ref: "#/components/responses/NotFound"

        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete User record
      description: Delete Single User record using it's id
      tags:
        - "Admin.UserService.CRUD"
      security:
        - adminAuth: []
      parameters:
        - name: id
          in: query
          description: Id of the admin
          required: true
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/Successful"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /merchant/auth/register:
    post:
      summary: Merchant registration
      description: Registering new merchant with given credentials
      tags:
        - "Merchant"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MerchantInput"
      responses:
        "201":
          description: Successful Registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantResponse"
        "422":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /merchant/auth/login:
    post:
      summary: Merchant Login
      description: Login merchant with given credentials
      tags:
        - "Merchant"
      requestBody:
        content:
          application/json:
            example:
              email: "roman@gmail.com"
              password: "roman123"
      responses:
        "201":
          description: Login Successfully
          content:
            application/json:
              example:
                message: string
                data:
                  token: "<token>"
        "422":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /merchant/auth/check:
    get:
      tags:
        - "Merchant"
      security:
        - merchantAuth: []
        - swaggerAuth: []
      responses:
        "200":
          description: "Auth user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantResponse"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # /api/posts/{id}:
  #   get:
  #     summary: Get a post by ID
  #     tags:
  #       - Posts
  #     parameters:
  #       - name: id
  #         in: path
  #         required: true
  #         schema:
  #           type: integer
